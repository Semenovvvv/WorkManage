@page "/works/details"

@using Microsoft.EntityFrameworkCore
@using WorkManage.Data
@using WorkManage.Data.Models
@inject IDbContextFactory<WorkManage.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Подробности</h1>

<div>
    <h4>Работа</h4>
    <hr />
    @if (work is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Название</dt>
            <dd class="col-sm-10">@work.Name</dd>
            <dt class="col-sm-2">Мастер</dt>
            <dd class="col-sm-10">@(work.Master.LastName + ' ' + @work.Master.FirstName + ' ' + @work.Master.Patronymic)</dd>
            <dt class="col-sm-2">Длительность</dt>
            <dd class="col-sm-10">@work.DaysCount</dd>
            <dt class="col-sm-2">Стоимость</dt>
            <dd class="col-sm-10">@work.Price</dd>
        </dl>
        <div>
            <a href="@($"/works/edit?workid={work.Id}")">Изменить</a> |
            <a href="@($"/works")">Back to List</a>
        </div>
    }
</div>

@code {
    Work? work;

    [SupplyParameterFromQuery]
    public int WorkId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        work = await context.Works.FirstOrDefaultAsync(m => m.Id == WorkId);

        if (work is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
