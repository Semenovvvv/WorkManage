@page "/workstages/create"

@using Microsoft.EntityFrameworkCore
@using WorkManage.Data
@using WorkManage.Data.Models
@inject IDbContextFactory<WorkManage.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>WorkStage</h4>
<hr />
@if (Work is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="WorkStage" OnValidSubmit="AddWorkStage" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                <input type="hidden" name="Work.Id" value="@Work.Id" />
                @* <div class="mb-3">
            <label for="workid" class="form-label">WorkId:</label>
            <InputNumber id="workid" @bind-Value="WorkStage.WorkId" class="form-control" />
            <ValidationMessage For="() => WorkStage.WorkId" class="text-danger" />
            </div> *@
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="WorkStage.Name" class="form-control" />
                    <ValidationMessage For="() => WorkStage.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="WorkStage.Price" class="form-control" />
                    <ValidationMessage For="() => WorkStage.Price" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Create</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href=@($"/workstages?workid={WorkId}")>Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int? WorkId { get; set; }

    public Work? Work { get; set; }

    [SupplyParameterFromForm]
    public WorkStage? WorkStage { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Work = await context.Works.FirstOrDefaultAsync(m => m.Id == WorkId);
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddWorkStage()
    {
        using var context = DbFactory.CreateDbContext();
        WorkStage.WorkId = Work.Id;
        context.WorkStages.Add(WorkStage);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/workstages?workid={Work.Id}");
    }
}
